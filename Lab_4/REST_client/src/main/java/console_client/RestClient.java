package console_client;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.GenericType;
import com.sun.jersey.api.client.WebResource;
import org.codehaus.jettison.json.JSONArray;
import wsdl_autogenerated.Person;


import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class RestClient {
    private final Client client;
    private final String URL = "http://localhost:8080/rest/persons";

    public RestClient(){
        client = Client.create();
    }

    private WebResource personToQueryParams(Person p){
        WebResource webResource = client.resource(URL);
        if (p.getName() != null) webResource = webResource.queryParam("name", p.getName());
        if (p.getSurname() != null) webResource = webResource.queryParam("surname", p.getSurname());
        if (p.getAge() != 0) webResource = webResource.queryParam("age", String.valueOf(p.getAge()));
        if (p.getCountry() != null) webResource = webResource.queryParam("country", p.getCountry());
        if (p.getGender() != null) webResource = webResource.queryParam("gender", p.getGender());
        if (p.getId() != 0) webResource = webResource.queryParam("id", String.valueOf(p.getId()));
        return webResource;
    }

    public List<Person> getAllPersons(String name) throws ParseException {
        List<Person> list = new ArrayList<>();
        WebResource webResource = client.resource(URL);
        if (name != null) {
            webResource = webResource.queryParam("name", name);
        }
        ClientResponse response =
                webResource.accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
        if (response.getStatus() != ClientResponse.Status.OK.getStatusCode() && response.getStatus() != 404) {

            response.bufferEntity();
            String x = response.getEntity(String.class);
            System.out.println(x);
            throw new IllegalStateException("Request failed");
        }
        else if (response.getStatus() == 404){
            System.out.println("No person found by given query params");
        }
        else {
            response.bufferEntity();
            String x = response.getEntity(String.class);
            System.out.println(x);
            Gson gson = new Gson();
            JsonParser p = new JsonParser();
            JsonElement jsonContainer = p.parse(x);
            JsonElement jsonQuery = ((JsonObject) jsonContainer).get("person");
            if (jsonQuery.isJsonArray()) {
                list = gson.fromJson(jsonQuery, new TypeToken<List<Person>>() {
                }.getType());
            } else if (jsonQuery.isJsonObject()) {

                Person person = gson.fromJson(jsonQuery, Person.class);
                list = new ArrayList<>();
                list.add(person);
            } else throw new ParseException("Unable to parse input json", 1);
        }
        return list;
    }

//    public void addPerson(Person p) {
//        WebResource webResource = client.resource(URL).path("add");
//            //webResource.post(p);
//        ClientResponse response =
//                webResource
//                        .type(MediaType.APPLICATION_XML).post();
//        if (response.getStatus() != ClientResponse.Status.OK.getStatusCode()) {
//            throw new IllegalStateException("Request failed");
//        }
//    }
    public void addPerson(Person person){
        WebResource webResource = client.resource(URL);
        ClientResponse response =
                webResource.type(MediaType.APPLICATION_JSON).post(ClientResponse.class, person);
        response.bufferEntity();
    }

    public void updatePerson(Person oldPerson, Person newPerson){
        WebResource webResource = personToQueryParams(oldPerson);
        ClientResponse response =
                webResource.type(MediaType.APPLICATION_JSON).put(ClientResponse.class, newPerson);
        response.bufferEntity();
    }

    public void deletePerson(Person person){
        WebResource webResource = personToQueryParams(person);
        ClientResponse response =
                webResource.delete(ClientResponse.class);
        response.bufferEntity();
    }

    private void printList(List<Person> persons) {
        for (Person person : persons) {
            System.out.println(person.toString());
        }
    }
}
